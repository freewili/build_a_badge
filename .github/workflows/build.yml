name: Build and Release

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_ext: ""
            artifact_name: build-a-badge-linux
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_ext: ".exe"
            artifact_name: build-a-badge-windows
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_ext: ""
            artifact_name: build-a-badge-macos

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libasound2-dev \
          libxkbcommon-dev \
          libwayland-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxi-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          pkg-config

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Create artifact directory
      run: mkdir -p artifact

    - name: Copy binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/build_a_badge${{ matrix.binary_ext }} artifact/
        chmod +x artifact/build_a_badge${{ matrix.binary_ext }}

    - name: Copy binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        copy "target\${{ matrix.target }}\release\build_a_badge${{ matrix.binary_ext }}" artifact\

    - name: Copy assets directory
      if: matrix.os != 'windows-latest'
      run: cp -r assets artifact/

    - name: Copy assets directory (Windows)
      if: matrix.os == 'windows-latest'
      run: xcopy assets artifact\assets\ /E /I

    - name: Copy additional files (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cp Cargo.toml artifact/ || true
        cp README.md artifact/ || true
        cp LICENSE artifact/ || true

    - name: Copy additional files (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        if exist Cargo.toml copy Cargo.toml artifact\
        if exist README.md copy README.md artifact\
        if exist LICENSE copy LICENSE artifact\

    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd artifact
        tar -czf ../${{ matrix.artifact_name }}.tar.gz *

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd artifact
        7z a ../${{ matrix.artifact_name }}.zip *

    - name: Upload artifact (Unix)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}.tar.gz
        retention-days: 30

    - name: Upload artifact (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}.zip
        retention-days: 30

  # Release job - only runs on release tags
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts

    - name: Display structure of downloaded files
      run: ls -la artifacts/

    - name: Upload Linux artifact to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./artifacts/build-a-badge-linux/build-a-badge-linux.tar.gz
        asset_name: build-a-badge-linux.tar.gz
        asset_content_type: application/gzip

    - name: Upload Windows artifact to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./artifacts/build-a-badge-windows/build-a-badge-windows.zip
        asset_name: build-a-badge-windows.zip
        asset_content_type: application/zip

    - name: Upload macOS artifact to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./artifacts/build-a-badge-macos/build-a-badge-macos.tar.gz
        asset_name: build-a-badge-macos.tar.gz
        asset_content_type: application/gzip
